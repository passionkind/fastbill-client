// Generated by CoffeeScript 1.9.1
(function() {
  var _, api, api_description, createAccessorFromArray, createQueryFunction, credentials, formatString, fs, q, request;

  fs = require('fs');

  request = require('request');

  q = require('q');

  _ = require('lodash');

  api_description = require('./fastbill-api-description.json');

  api = {};

  credentials = null;

  formatString = function(a) {
    if (a == null) {
      a = "";
    }
    return a.substr(0, 1).toUpperCase() + a.substr(1, a.length).toLowerCase();
  };

  createAccessorFromArray = function(array) {
    if (array.length === 1) {
      array.push("");
    }
    return _.reduce(array, function(result, partial, key) {
      if (key === 1) {
        return formatString(result) + formatString(partial);
      } else {
        return result + formatString(partial);
      }
    });
  };

  createQueryFunction = function(payload, entityName) {
    var deferred;
    deferred = q.defer();
    if (!credentials) {
      deferred.reject("Credentials not set");
    }
    request({
      method: "POST",
      auth: credentials,
      uri: api_description.endpoint,
      body: JSON.stringify(payload)
    }, function(err, response, body) {
      if (err) {
        return deferred.reject({
          "REQUEST_ERROR": err
        });
      } else {
        body = JSON.parse(body);
        if (body.RESPONSE && body.RESPONSE.ERRORS) {
          return deferred.reject(body["RESPONSE"]["ERRORS"]);
        }
        if (entityName) {
          return deferred.resolve(body["RESPONSE"][(entityName.toUpperCase()) + "S"]);
        } else {
          return deferred.resolve(body["RESPONSE"]);
        }
      }
    });
    return deferred.promise;
  };

  _.forEach(api_description.services, function(entityObject, entityName) {
    var serviceAPI;
    serviceAPI = {};
    _.forEach(entityObject.verbs, function(verb) {
      var getAccessors;
      if (verb !== "get") {
        return serviceAPI[verb] = function(data) {
          var payload;
          payload = {
            service: entityName + "." + verb,
            data: data
          };
          return createQueryFunction(payload);
        };
      } else {
        getAccessors = [];
        serviceAPI["get"] = function(filterObject, offset, limit) {
          var payload;
          if (offset == null) {
            offset = 0;
          }
          if (limit == null) {
            limit = 100;
          }
          payload = {
            service: entityName + "." + verb,
            offset: offset,
            limit: limit,
            filter: filterObject
          };
          return createQueryFunction(payload, entityName);
        };
        _.forEach(entityObject.get_filter, function(fieldName) {
          var fieldPartials, length;
          fieldPartials = fieldName.split('_');
          getAccessors.push({
            accessor: createAccessorFromArray(fieldPartials),
            filter: fieldName
          });
          length = fieldPartials.length;
          fieldPartials = _.pull(fieldPartials, entityName.toUpperCase());
          if (length !== fieldPartials.length) {
            return getAccessors.push({
              accessor: createAccessorFromArray(fieldPartials),
              filter: fieldName
            });
          }
        });
        return _.forEach(getAccessors, function(accessorObject) {
          return serviceAPI["getBy" + accessorObject.accessor] = function(filterValueOrValueArray, offset, limit) {
            var payload;
            if (offset == null) {
              offset = 0;
            }
            if (limit == null) {
              limit = 100;
            }
            payload = {
              service: entityName + "." + verb,
              offset: offset,
              limit: limit,
              filter: {}
            };
            payload.filter["" + accessorObject.filter] = filterValueOrValueArray;
            return createQueryFunction(payload, entityName);
          };
        });
      }
    });
    return api[entityName] = serviceAPI;
  });

  module.exports = {
    api: api,
    bootstrap: function(username, password) {
      if (username && password) {
        return credentials = {
          "user": username,
          "pass": password
        };
      } else {
        return credentials = null;
      }
    }
  };

}).call(this);
